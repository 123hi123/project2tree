代碼摘要樹狀結構
==============

├── code_summarizer.py    ## 程式碼摘要 |  | **1. 主要功能:** |  | 該 Python 腳本 `code_summarizer.py` 是一個代碼摘要生成器，它使用 OpenAI API 根據 YAML 配置文件和 .gitignore 規則，遞歸地遍歷指定目錄中的文本文件，提取代碼內容，並生成每個文件的摘要。摘要以樹狀結構保存到 JSON 文件中。 |  | **2. 核心類和函數:** |  | *   **`CodeSummarizer` 類:** |     *   `__init__`: 初始化摘要生成器，加載配置，設置 API 參數，加載 .gitignore 規則。 |     *   `_load_config`: 加載 YAML 配置文件，如果文件不存在，則創建示例配置文件。 |     *   `_create_example_config`: 創建示例 YAML 配置文件。 |     *   `_load_gitignore`: 加載 .gitignore 文件中的忽略規則。 |     *   `_should_ignore`: 判斷文件/目錄是否應該被忽略。 |     *   `is_text_file`: 判斷文件是否為文本文件。 |     *   `read_file_content`: 讀取文件內容。 |     *   `get_code_summary`: 使用 OpenAI API 獲取代碼摘要。 |     *   `process_directory`: 處理目錄中的所有文件。 |     *   `generate_tree_structure`: 生成樹狀結構。 |     *   `save_tree_to_file`: 將樹狀結構保存到文件。 | *   **`main` 函數:** 創建 `CodeSummarizer` 實例，處理目錄，並保存結果。 |  | **3. 重要功能點:** |  | *   **配置加載:** 從 `config.yaml` 文件或環境變量加載 OpenAI API 密鑰和其他配置。如果配置文件不存在，則創建示例文件。 | *   **.gitignore 支持:**  根據 `.gitignore` 文件中的規則忽略文件和目錄。 | *   **文本文件過濾:** 僅處理常見的文本文件類型。 | *   **OpenAI API 集成:** 使用 OpenAI API 生成代碼摘要，具有重試機制。 | *   **樹狀結構輸出:** 將摘要組織成樹狀結構，並保存到 JSON 文件中。 | *   **錯誤處理:** 包含錯誤處理，
├── README.md    這個 README 文件描述了一個代碼摘要生成器工具。 |  | **主要功能:** |  | *   掃描專案目錄中的文本文件，生成代碼摘要，並將結果保存為樹狀結構的 JSON 文件。 | *   使用 AI 模型（例如 OpenAI 的 GPT）來分析和總結代碼。 |  | **核心類和函數:** |  | *   `code_summarizer.py`: 該工具的 Python 腳本，用於掃描、摘要生成和結果保存。 |  | **重要功能點:** |  | *   **配置:** 支持 YAML 配置文件 (`config.yaml`) 和環境變數 (`.env` 文件) 進行配置，包括 OpenAI API 密鑰。 | *   **忽略文件:** 忽略 `.gitignore` 中指定的文件和目錄。 | *   **輸出:** 將摘要結果保存為 `code_summary_tree.json` 文件。 | *   **錯誤處理:** 提供 API 密鑰未設置和 YAML 解析錯誤的疑難排解建議。
├── requirements.txt    這個 `requirements.txt` 文件的摘要如下： |  | 1.  **主要功能:**  列出 Python 專案的依賴項，用於安裝專案所需的所有 Python 函式庫。 | 2.  **核心元素:**  文件本身，包含一系列依賴項及其版本號。 | 3.  **重要功能點:** |     *   `openai>=1.0.0`:  指定了使用 OpenAI 函式庫，版本號大於或等於 1.0.0。 |     *   `pyyaml>=6.0`:  指定了使用 PyYAML 函式庫，版本號大於或等於 6.0。 |     *   `python-dotenv>=1.0.0`:  指定了使用 python-dotenv 函式庫，版本號大於或等於 1.0.0，用於從 `.env` 文件加載環境變數。
└── tree_visualizer.py    這個 Python 腳本 `tree_visualizer.py` 的主要功能是將 JSON 文件中的數據以樹狀結構的形式可視化，並將結果保存到文本文件或打印到控制台。 |  | *   **核心類:** `TreeVisualizer` | *   **核心函數:** |     *   `__init__(self, json_file: str, output_file: str = "code_summary_tree.txt")`: 初始化函數，接收 JSON 文件路徑和輸出文件路徑。 |     *   `load_json(self) -> Dict[str, Any]`: 加載 JSON 文件並返回數據。 |     *   `_visualize_tree_recursive(self, data: Dict[str, Any], file: TextIO, prefix: str = "", is_last: bool = True) -> None`: 遞歸生成樹狀結構，用於格式化樹狀結構的文本。 |     *   `visualize(self) -> None`: 生成並保存樹狀結構到文本文件。 |     *   `print_tree(self) -> None`: 將樹狀結構打印到控制台。 | *   **重要功能點:** |     *   從 JSON 文件讀取數據。 |     *   使用遞歸方法構建樹狀結構。 |     *   將樹狀結構輸出到文本文件，並在同一行顯示文件名和摘要，將多行摘要合併成一行。 |     *   將樹狀結構打印到控制台。 |     *   提供 `main()` 函數，演示如何使用 `TreeVisualizer` 類。
